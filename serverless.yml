service: dapi-demo

frameworkVersion: "3"

plugins:
  - serverless-python-requirements
  - serverless-dynamodb
  - serverless-offline

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

custom:
  serverless-dynamodb:
    stages:
      - local
    start:
      port: 8000
      docker: true
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, "local"}
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    DYNAMODB_LOCAL: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - Fn::GetAtt:
                - TodosDynamoDbTable
                - Arn

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.todo_list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{todo_id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                todo_id: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{todo_id}
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                todo_id: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{todo_id}
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                todo_id: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: todo_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: todo_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
